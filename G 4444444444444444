Давайте рассмотрим, как выполнить задание по настройке мониторинга на инстансе **Cloud-MON**, используя **Docker**, **NodeExporter**, **Prometheus** и **Grafana** для мониторинга инфраструктуры. Я постараюсь учесть все детали и предоставить подробные инструкции для каждого этапа.

### Шаг 1: Создание инстанса **Cloud-MON**
Для создания инстанса **Cloud-MON** с параметрами:
- **Тип виртуальной машины**: 1 vCPU, 1 ГБ RAM.
- **Размер диска**: 10 ГБ.
- **Операционная система**: **Альт Starterkit** (шаблон alt-p10-cloud-x86_64).

#### Пример команд для создания инстанса через ваш облачный провайдер:
```bash
# Пример создания виртуальной машины Cloud-MON (вам нужно использовать ваш интерфейс/провайдер)
create_vm --name Cloud-MON --cpu 1 --ram 1024 --disk 10 --os alt-p10-cloud-x86_64
```

### Шаг 2: Организация доступа по SSH до инстанса **Cloud-MON** с инстанса **Cloud-ADM**
1. **Подключение на основе ключевой пары:**
   - Создайте пару SSH-ключей, если ещё не создана:
     ```bash
     ssh-keygen -t rsa -b 2048 -f ~/.ssh/cloud-mon-key
     ```
   - Убедитесь, что публичный ключ находится в файле `~/.ssh/cloud-mon-key.pub`.

2. **Добавление публичного ключа на инстанс Cloud-MON:**
   - Для добавления публичного ключа на **Cloud-MON**, можно использовать команду:
     ```bash
     ssh-copy-id -i ~/.ssh/cloud-mon-key.pub altlinux@Cloud-MON-IP
     ```

3. **Настройка подключения по имени**:
   - Чтобы подключаться к инстансу **Cloud-MON** по имени `cloud-mon` с инстанса **Cloud-ADM**, добавьте запись в файл `~/.ssh/config` на **Cloud-ADM**:
     ```bash
     Host cloud-mon
         HostName Cloud-MON-IP
         User altlinux
         IdentityFile ~/.ssh/cloud-mon-key
     ```

Теперь вы можете подключаться по имени, используя команду:
```bash
ssh cloud-mon
```

### Шаг 3: Установка Docker и Docker Compose на **Cloud-MON**
1. **Установите Docker**:
   - Обновите систему и установите Docker:
     ```bash
     sudo apt-get update
     sudo apt-get install -y docker.io
     sudo systemctl enable --now docker
     ```

2. **Установите Docker Compose**:
   - Установите Docker Compose:
     ```bash
     sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
     sudo chmod +x /usr/local/bin/docker-compose
     ```

3. **Проверьте установку Docker и Docker Compose**:
   ```bash
   docker --version
   docker-compose --version
   ```

### Шаг 4: Настройка мониторинга с использованием Docker Compose
Теперь создадим файл **`monitoring.yml`** в домашней директории пользователя **altlinux** для настройки **NodeExporter**, **Prometheus** и **Grafana** с помощью **Docker Compose**.

1. **Создайте файл `monitoring.yml`**:
   Перейдите в домашнюю директорию и создайте файл **`monitoring.yml`**:
   ```bash
   cd /home/altlinux
   touch monitoring.yml
   nano monitoring.yml
   ```

2. **Содержание файла `monitoring.yml`**:
   Вставьте следующий конфигурационный файл **Docker Compose** для настройки **NodeExporter**, **Prometheus** и **Grafana**:

```yaml
version: '3'
services:
  nodeexporter:
    image: prom/node-exporter:v1.3.1
    container_name: nodeexporter
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /var/run:/host/var/run:rw
    networks:
      - monitoring

  prometheus:
    image: prom/prometheus:v2.27.0
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - monitoring
    depends_on:
      - nodeexporter

  grafana:
    image: grafana/grafana:7.3.1
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: 'admin'
    networks:
      - monitoring
    depends_on:
      - prometheus

networks:
  monitoring:
    driver: bridge
```

3. **Создайте конфигурацию Prometheus (`prometheus.yml`)**:
   Для того чтобы **Prometheus** мог собирать метрики с **NodeExporter**, создайте файл **`prometheus.yml`** в той же директории:

```yaml
global:
  scrape_interval: 15s

scrape_configs:
  - job_name: 'nodeexporter'
    static_configs:
      - targets: ['nodeexporter:9100']
```

### Шаг 5: Запуск контейнеров с помощью Docker Compose
1. **Запустите контейнеры**:
   Выполните команду:
   ```bash
   docker-compose -f /home/altlinux/monitoring.yml up -d
   ```

2. **Проверьте работу контейнеров**:
   Убедитесь, что контейнеры работают:
   ```bash
   docker ps
   ```

### Шаг 6: Настройка Grafana Dashboard
1. **Доступ к Grafana**:
   Интерфейс Grafana будет доступен по адресу **`grafana.au.team`** на порту **3000** с инстанса **Cloud-ADM**. Для этого:
   - Настройте DNS для **grafana.au.team** на инстансе **Cloud-ADM**, чтобы он разрешал IP-адрес **Cloud-MON**.

2. **Настройка Dashboard в Grafana**:
   - Перейдите в Grafana по адресу `http://grafana.au.team:3000`.
   - Логин: **admin**, пароль: **admin** (по умолчанию).
   - Добавьте **Prometheus** как источник данных:
     - В Grafana перейдите в **Configuration** -> **Data Sources**.
     - Выберите **Prometheus** и настройте URL: `http://prometheus:9090`.
   - Создайте или импортируйте Dashboard для отображения метрик (CPU, RAM, диск).

### Шаг 7: Добавление инстансов для мониторинга
1. **Добавление инстансов Cloud-ADM, Cloud-BACKUP01 и Cloud-BACKUP02** в мониторинг:
   - Настройте **NodeExporter** на инстансах **Cloud-ADM**, **Cloud-BACKUP01** и **Cloud-BACKUP02** с аналогичными конфигурациями, как и на **Cloud-MON**.
   - В **Prometheus** добавьте их как цели для сбора метрик:
   
```yaml
scrape_configs:
  - job_name: 'nodeexporter'
    static_configs:
      - targets: ['cloud-mon:9100', 'cloud-adm:9100', 'cloud-backup01:9100', 'cloud-backup02:9100']
```

Теперь вы сможете мониторить все указанные инстансы через Grafana.

---

В результате этого процесса вы получите настроенную систему мониторинга с **Prometheus** и **Grafana**, с возможностью отслеживания загрузки процессора, объема свободной оперативной памяти и места на диске для инстансов **Cloud-MON**, **Cloud-ADM**, **Cloud-BACKUP01** и **Cloud-BACKUP02**.
