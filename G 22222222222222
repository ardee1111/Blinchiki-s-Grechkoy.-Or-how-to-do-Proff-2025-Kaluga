Для выполнения задания на развертывание облачной инфраструктуры, с использованием инструментов Terraform или OpenStack CLI, мы можем разбить задачу на несколько этапов:

### Шаг 1: Создание инстансов и настройка облачной инфраструктуры
1. **Создание инстансов**: 
   Нужно создать инстансы с указанными характеристиками:
   - **Cloud-HA01, Cloud-HA02**:
     - 1 vCPU, 512 МБ RAM, 10 ГБ диск
   - **Cloud-DB01, Cloud-DB02, Cloud-WEB01, Cloud-WEB02**:
     - 1 vCPU, 1 ГБ RAM, 10 ГБ диск
   - Операционная система: **alt-p10-cloud-x86_64** (с использованием шаблона **Alt Starterkit**).

2. **Создание виртуальных сетей**:
   Нужно обеспечить правильное подключение инстансов к виртуальным сетям, согласно топологии L-3. Использование OpenStack или Terraform позволяет создать сети и подсети, подключив их к инстансам.

3. **Реализация безопасного доступа**:
   - Разрешить ICMP трафик для всех инстансов.
   - Ограничить доступ по SSH, разрешив подключение только с машины **Cloud-ADM** с использованием публичных ключей.

4. **Создание балансировщика нагрузки**:
   - Балансировщик нагрузки будет распределять трафик между инстансами **Cloud-HA01** и **Cloud-HA02**.
   - Для балансировщика нужно ограничить доступ только протоколами HTTP и HTTPS (порты 80 и 443).

### Шаг 2: Реализация скрипта автоматизации (deploy-cloudinfra.sh)

Для создания сценария автоматизации мы будем использовать **Terraform** или **OpenStack CLI**. Пример с **Terraform**:

#### a) Конфигурация инфраструктуры с Terraform
1. **Создание конфигурационного файла Terraform**:
   Этот файл будет описывать создание инстансов, виртуальных сетей и балансировщика нагрузки. Пример конфигурации:

```hcl
provider "openstack" {
  auth_url    = var.auth_url
  tenant_name = var.tenant_name
  user_name   = var.user_name
  password    = var.password
  region      = var.region
}

# Создание сети
resource "openstack_networking_network_v2" "private_network" {
  name = "private_network"
}

# Создание подсети
resource "openstack_networking_subnet_v2" "subnet" {
  name            = "subnet"
  network_id      = openstack_networking_network_v2.private_network.id
  cidr            = "192.168.0.0/24"
  ip_version      = 4
}

# Создание инстансов
resource "openstack_compute_instance_v2" "cloud_ha01" {
  name            = "Cloud-HA01"
  flavor_name     = "m1.small"
  image_name      = "alt-p10-cloud-x86_64"
  network {
    uuid = openstack_networking_network_v2.private_network.id
  }
  key_pair        = var.key_pair_name
}

resource "openstack_compute_instance_v2" "cloud_ha02" {
  name            = "Cloud-HA02"
  flavor_name     = "m1.small"
  image_name      = "alt-p10-cloud-x86_64"
  network {
    uuid = openstack_networking_network_v2.private_network.id
  }
  key_pair        = var.key_pair_name
}

# Создание балансировщика нагрузки
resource "openstack_lb_loadbalancer_v2" "lb" {
  name            = "lb"
  subnet_id       = openstack_networking_subnet_v2.subnet.id
  vip_subnet_id   = openstack_networking_subnet_v2.subnet.id
}

# Добавление серверов в пул балансировщика
resource "openstack_lb_pool_v2" "pool" {
  name            = "pool"
  loadbalancer_id = openstack_lb_loadbalancer_v2.lb.id
  protocol        = "HTTP"
  lb_method       = "ROUND_ROBIN"
}

resource "openstack_lb_member_v2" "member_ha01" {
  pool_id         = openstack_lb_pool_v2.pool.id
  address         = openstack_compute_instance_v2.cloud_ha01.access_ip_v4
  protocol_port   = 80
}

resource "openstack_lb_member_v2" "member_ha02" {
  pool_id         = openstack_lb_pool_v2.pool.id
  address         = openstack_compute_instance_v2.cloud_ha02.access_ip_v4
  protocol_port   = 80
}
```

2. **Переменные для конфигурации**:
   В Terraform можно использовать переменные для настроек, таких как логин и пароль к OpenStack, имя ключа SSH и другие параметры.

```hcl
variable "auth_url" {}
variable "tenant_name" {}
variable "user_name" {}
variable "password" {}
variable "region" {}
variable "key_pair_name" {}
```

3. **Файл cloudinit.conf для настройки подключения**:
   Этот файл может содержать переменные и комментарии для упрощения настройки:

```ini
# Конфигурация для подключения к облачному провайдеру
auth_url = "https://openstack.example.com:5000/v3"
tenant_name = "my_project"
user_name = "user"
password = "password"
region = "RegionOne"
key_pair_name = "my_key_pair"
```

#### b) Скрипт для автоматизации
После создания конфигурации Terraform, скрипт `deploy-cloudinfra.sh` должен быть следующим образом настроен:

```bash
#!/bin/bash

# Рабочая директория
WORKDIR="/home/altlinux/bin"
CONFIG_FILE="$WORKDIR/cloudinit.conf"

# Инициализация Terraform
cd $WORKDIR

# Проверка наличия конфигурационного файла
if [ ! -f "$CONFIG_FILE" ]; then
  echo "Файл конфигурации $CONFIG_FILE не найден!"
  exit 1
fi

# Экспорт переменных окружения для Terraform из конфигурации
source $CONFIG_FILE

# Выполнение Terraform команд для создания инфраструктуры
terraform init
terraform apply -auto-approve

echo "Инфраструктура развернута успешно!"
```

#### c) Скрипт выполнения из любой директории
Чтобы можно было запускать скрипт из любой директории, нужно добавить его в `$PATH` или создать симлинк в каталоге `/usr/local/bin`:

```bash
sudo ln -s /home/altlinux/bin/deploy-cloudinfra.sh /usr/local/bin/deploy-cloudinfra
```

Теперь можно запускать скрипт, используя команду `deploy-cloudinfra` из любой директории.

---

### Шаг 3: Проверка безопасности и доступа
1. **ICMP**: Разрешение ICMP для всех инстансов можно сделать через настройки безопасности в OpenStack или через Terraform:
   ```hcl
   resource "openstack_networking_security_group_rule_v2" "icmp_rule" {
     direction = "ingress"
     protocol  = "icmp"
     port_range = "0"
     security_group_id = openstack_networking_security_group_v2.sg.id
   }
   ```

2. **SSH доступ с Cloud-ADM**: Для этого можно настроить правила безопасности и ключи доступа только для инстанса **Cloud-ADM**.

3. **HTTP/HTTPS доступ для балансировщика**:
   Балансировщик нагрузки будет ограничен только протоколами HTTP и HTTPS с помощью настроек в Terraform или через OpenStack CLI.

---

Этот сценарий создает нужную облачную инфраструктуру и автоматизирует процесс развертывания с помощью Terraform. Все настройки могут быть изменены через файл `cloudinit.conf`.
