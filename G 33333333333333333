Для выполнения этого задания, создадим подробный пошаговый сценарий настройки облачной инфраструктуры на инстансах **Cloud-HA01**, **Cloud-HA02**, **Cloud-WEB01**, **Cloud-WEB02**, **Cloud-DB01** и **Cloud-DB02** с использованием **Ansible**. Я постараюсь учесть все маловажные моменты и подробно расписать шаги.

### Шаг 1: Установка и настройка HAProxy на инстансах **Cloud-HA01** и **Cloud-HA02**
**HAProxy** будет использоваться для балансировки нагрузки между веб-серверами **Cloud-WEB01** и **Cloud-WEB02**. Для этого нужно:
1. Установить **HAProxy**:
   - Установим HAProxy через пакетный менеджер.
2. Настроим **frontend** для прослушивания портов 80 (HTTP) и 443 (HTTPS).
3. Настроим **backend** с балансировкой трафика между веб-серверами **Cloud-WEB01** и **Cloud-WEB02** с использованием алгоритма **round-robin**.
4. Настроим **health checks** для мониторинга доступности веб-серверов.

Пример **Ansible playbook** для установки и настройки **HAProxy** на обоих инстансах:

```yaml
---
- name: Install and configure HAProxy on Cloud-HA01 and Cloud-HA02
  hosts: [cloud_ha01, cloud_ha02]
  become: true
  tasks:
    - name: Install HAProxy
      apt:
        name: haproxy
        state: present

    - name: Configure HAProxy frontend and backend
      template:
        src: /home/altlinux/templates/haproxy.cfg.j2
        dest: /etc/haproxy/haproxy.cfg
      notify:
        - restart haproxy

    - name: Ensure HAProxy is started and enabled
      service:
        name: haproxy
        state: started
        enabled: true

  handlers:
    - name: restart haproxy
      service:
        name: haproxy
        state: restarted
```

**Шаблон для конфигурации HAProxy (`haproxy.cfg.j2`)**:

```bash
frontend http_front
    bind *:80
    bind *:443 ssl crt /etc/ssl/certs/mycert.pem
    default_backend http_back

backend http_back
    balance roundrobin
    server web01 Cloud-WEB01:80 check
    server web02 Cloud-WEB02:80 check
```

### Шаг 2: Установка и настройка **Keepalived** на **Cloud-HA01** и **Cloud-HA02**
**Keepalived** используется для обеспечения отказоустойчивости и виртуального IP (VIP). Настроим **Active-Backup** режим с приоритетами:
- **Cloud-HA01** будет активным узлом с приоритетом 100.
- **Cloud-HA02** будет резервным узлом с приоритетом 90.
- Используем общий секретный ключ для аутентификации между узлами.

Пример **Ansible playbook** для установки и настройки **Keepalived**:

```yaml
---
- name: Install and configure Keepalived on Cloud-HA01 and Cloud-HA02
  hosts: [cloud_ha01, cloud_ha02]
  become: true
  tasks:
    - name: Install Keepalived
      apt:
        name: keepalived
        state: present

    - name: Configure Keepalived for HA
      template:
        src: /home/altlinux/templates/keepalived.conf.j2
        dest: /etc/keepalived/keepalived.conf
      notify:
        - restart keepalived

    - name: Ensure Keepalived is started and enabled
      service:
        name: keepalived
        state: started
        enabled: true

  handlers:
    - name: restart keepalived
      service:
        name: keepalived
        state: restarted
```

**Шаблон конфигурации Keepalived (`keepalived.conf.j2`)**:

```bash
vrrp_instance VI_1 {
    state MASTER
    interface eth0
    virtual_router_id 51
    priority 100  # У Cloud-HA01 будет приоритет 100, у Cloud-HA02 — 90
    advert_int 1
    authentication {
        auth_type PASS
        auth_pass mysecretkey
    }
    virtual_ipaddress {
        192.168.0.100  # Виртуальный IP (VIP)
    }
}
```

### Шаг 3: Установка и настройка **Apache2** на инстансах **Cloud-WEB01** и **Cloud-WEB02**
1. Установим **Apache2** и настроим виртуальные хосты для обслуживания веб-приложений.
2. Обеспечим поддержку PHP.
3. Настроим взаимодействие с базой данных (PostgreSQL).
4. Создадим простой тестовый веб-приложение.

Пример **Ansible playbook** для установки и настройки **Apache2**:

```yaml
---
- name: Install and configure Apache2 on Cloud-WEB01 and Cloud-WEB02
  hosts: [cloud_web01, cloud_web02]
  become: true
  tasks:
    - name: Install Apache2 and PHP
      apt:
        name:
          - apache2
          - php
          - php-pgsql
        state: present

    - name: Configure Apache virtual hosts
      template:
        src: /home/altlinux/templates/apache_vhost.conf.j2
        dest: /etc/apache2/sites-available/000-default.conf
      notify:
        - restart apache

    - name: Ensure Apache2 is started and enabled
      service:
        name: apache2
        state: started
        enabled: true

  handlers:
    - name: restart apache
      service:
        name: apache2
        state: restarted
```

**Шаблон конфигурации Apache2 для виртуальных хостов (`apache_vhost.conf.j2`)**:

```bash
<VirtualHost *:80>
    DocumentRoot /var/www/html
    ServerName example.com
    <Directory /var/www/html>
        Options Indexes FollowSymLinks
        AllowOverride All
    </Directory>
</VirtualHost>

<VirtualHost *:443>
    DocumentRoot /var/www/html
    ServerName example.com
    SSLEngine on
    SSLCertificateFile /etc/ssl/certs/mycert.pem
    SSLCertificateKeyFile /etc/ssl/private/mykey.key
</VirtualHost>
```

### Шаг 4: Установка и настройка **PostgreSQL** на инстансах **Cloud-DB01** и **Cloud-DB02**
1. Установим **PostgreSQL**.
2. Настроим репликацию между **Cloud-DB01 (Master)** и **Cloud-DB02 (Replica)**.
3. Настроим отказоустойчивость с автоматическим переключением на реплику в случае сбоя мастера.
4. Создадим тестовую базу данных и пользователя.

Пример **Ansible playbook** для установки и настройки **PostgreSQL**:

```yaml
---
- name: Install and configure PostgreSQL on Cloud-DB01 and Cloud-DB02
  hosts: [cloud_db01, cloud_db02]
  become: true
  tasks:
    - name: Install PostgreSQL
      apt:
        name: postgresql
        state: present

    - name: Configure PostgreSQL replication
      template:
        src: /home/altlinux/templates/postgresql.conf.j2
        dest: /etc/postgresql/12/main/postgresql.conf
      notify:
        - restart postgresql

    - name: Create database and user for testdb
      postgresql_db:
        name: testdb
        state: present

    - name: Create user testuser
      postgresql_user:
        name: testuser
        password: testpassword
        db: testdb
        priv: "testdb=ALL"
        state: present

  handlers:
    - name: restart postgresql
      service:
        name: postgresql
        state: restarted
```

**Шаблон конфигурации PostgreSQL для репликации (`postgresql.conf.j2`)**:

```bash
# PostgreSQL master node (Cloud-DB01)
wal_level = replica
max_wal_senders = 3
hot_standby = on

# PostgreSQL replica node (Cloud-DB02)
hot_standby = on
```

### Шаг 5: Скрипт для автоматизации на **Cloud-ADM**
Создадим скрипт **configure-cloudinfra.sh**, который будет запускать все необходимые playbooks с использованием **Ansible**:

```bash
#!/bin/bash

# Путь к рабочей директории
WORKDIR="/home/altlinux/bin"
cd $WORKDIR

# Запуск всех playbooks
ansible-playbook haproxy.yml
ansible-playbook keepalived.yml
ansible-playbook apache.yml
ansible-playbook postgresql.yml

echo "Настройка инфраструктуры завершена!"
```

### Шаг 6: Убедитесь, что скрипт можно запускать из любой директории
Для того чтобы запускать скрипт из любой директории, добавим его в `$PATH`:

```bash
sudo ln -s /home/altlinux/bin/configure-cloudinfra.sh /usr/local/bin/configure-cloudinfra
```

Теперь можно запускать скрипт командой `configure-cloudinfra` из любой директории.

---

Этот подход гарантирует выполнение всех необходимых действий по автоматизации настройки облачной инфраструктуры на инстансах, включая установку и настройку HAProxy, Keepalived, Apache, PostgreSQL, а также конфигурацию отказоустойчивости и балансировки нагрузки.
